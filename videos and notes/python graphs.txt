use with a python notebook: https://mybinder.org/v2/gh/ipython/ipython-in-depth/master?filepath=binder/Index.ipynb




from matplotlib import pyplot as plt
import math

def logistic_function(x, L=1, x_0=0, k=1):
    return L /(1 + math.exp(k*(x - x_0)))
	
def generate_height_by_frame(number_of_frames):
    """For a known number of frames generate two arrays 1:frame_number 2:height """
    jump_size = 30 / (number_of_frames + 1)
    sample_points = [(i * jump_size) - 15 for i in range(number_of_frames + 1)]
    frame_number = range(number_of_frames + 1)
    heights = [logistic_function(sp, L=6.2, x_0=0, k=.3) - 0.1 for sp in sample_points]
    return (frame_number, heights)
	
number_of_frames = math.floor(40 / .35)

data = generate_height_by_frame(number_of_frames)

plt.plot(data[0], data[1])





from matplotlib import pyplot as plt
import math

def exponential_decay(x, a=1, b=1):
    return a * math.exp(-x * b)

def generate_height_by_frame(number_of_frames, inital_speed):
    """For a known number of frames generate two arrays 1:frame_number 2:height """
    jump_size = 30 / (number_of_frames + 1)
    sample_points = [(i * jump_size) - 15 for i in range(number_of_frames + 1)]
    frame_number = range(number_of_frames + 1)
    heights = [exponential_decay(sp, a=inital_speed, b=.2) - 0.01 for sp in sample_points]
    return (frame_number, heights)

number_of_frames = math.floor(5 / 0.05)
	
data = generate_height_by_frame(number_of_frames, 0.05)

plt.plot(data[0], data[1])


